import streamlit as st
import pandas as pd

st.set_page_config(page_title="ネイル材料価格表（完全版）", layout="wide")
st.title("ネイル材料価格表アプリ")

columns = ['カテゴリ', '用途', 'ブランド', '製品名', '容量', '通常価格', 'TAT価格', '備考', '優先順位',
           '容量数値', '容量単位', '単価（通常）', '単価（TAT価格）', '目安使用量', '使用可能回数', '1回あたり材料費']

data = [
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'ベースジェルジュラフィット', '10g', '2750.0', '', 'ネイルパートナーのみ', '1.0', '10.0', 'g', '275.0', '', '0.5', '20.0', '137.5'],
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'ベースジェルジュラフィット', '30g', '7480.0', '', 'ネイルパートナーのみ', '1.0', '30.0', 'g', '249.33', '', '0.5', '60.0', '124.67'],
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'ベースジェルジュラフィット', '100g', '19800.0', '', 'ネイルパートナーのみ', '1.0', '100.0', 'g', '198.0', '', '0.5', '200.0', '99.0'],
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'ベースジェルジュラフィット', '500g', '66000.0', '', '3/1より72000に値上げ', '1.0', '500.0', 'g', '132.0', '', '0.5', '1000.0', '66.0'],
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'RICCAマットコートジェル', '10g', '2750.0', '', '色鉛筆・マットトップ仕上げ用', '1.0', '10.0', 'g', '275.0', '', '0.5', '20.0', '137.5'],
    ['ジェル', 'ベースジェル・トップ・アート・長さ出し等', 'Riccagel', 'Riccaノンワイルデコジェル', '8g', '2420.0', '', '多く乗せると少し白くなる', '3.0', '8.0', 'g', '302.5', '', '0.5', '16.0', '151.25'],
        ['プライマー', 'ジェル前の油分除去・密着力向上', 'PREGEL', 'マジカルプライマー（ぞうさん）', '7ml', '990.0', '900.0', '', '3.0', '7.0', 'ml', '141.43', '128.57', '0.1', '70.0', '14.14'],
    ['プライマー', 'ジェル前の油分除去・密着力向上', 'フルーリア', 'プレプライマー', '10ml', '1540.0', '', '', '3.0', '10.0', 'ml', '154.0', '', '0.1', '100.0', '15.4'],
    ['プライマー', 'ジェル前の油分除去・密着力向上', 'ネイルデダンス', 'ノンアシッドプライマー', '10ml', '2288.0', '2080.0', '', '3.0', '10.0', 'ml', '228.8', '208.0', '0.1', '100.0', '22.88'],
    ['アクリル', 'スカルプ・補強・アクリルネイル用', 'フルーリア', 'アクリルリキッド', '480ml', '8250.0', '', '', '2.0', '480.0', 'ml', '17.19', '', '0.5', '960.0', '8.6'],
    ['溶剤', 'ジェルオフ用アセトン', 'スペースネイル', 'アセトン', '500ml', '1210.0', '1100.0', '', '1.0', '500.0', 'ml', '2.42', '2.2', '15', '33.0', '36.67']
]

df = pd.DataFrame(data, columns=columns)
df["通常価格"] = pd.to_numeric(df["通常価格"], errors="coerce").fillna(0)
df["TAT価格"] = pd.to_numeric(df["TAT価格"], errors="coerce").fillna(0)

selected_category = st.selectbox("🗂 カテゴリを選択してください", df["カテゴリ"].unique())
filtered_df = df[df["カテゴリ"] == selected_category]

st.markdown("### ✅ 商品を選択してください")
selected_rows = []
for i, row in filtered_df.iterrows():
    label = f"{row['製品名']}（通常価格: ¥{row['通常価格']}, TAT価格: ¥{row['TAT価格']}）"
    if st.checkbox(label, key=i):
        selected_rows.append(row)

if selected_rows:
    selected_df = pd.DataFrame(selected_rows)
    selected_df["通常価格"] = pd.to_numeric(selected_df["通常価格"], errors="coerce").fillna(0)
    selected_df["TAT価格"] = pd.to_numeric(selected_df["TAT価格"], errors="coerce").fillna(0)
    total_regular = selected_df["通常価格"].sum()
    total_tat = selected_df["TAT価格"].sum()

    st.success(f"🧾 合計：通常価格 ¥{int(total_regular):,} ／ TAT価格 ¥{int(total_tat):,}")
    st.dataframe(selected_df.reset_index(drop=True), use_container_width=True)
else:
    st.info("商品にチェックを入れると合計金額が表示されます。")
